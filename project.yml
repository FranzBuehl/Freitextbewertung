title: "Demo NER in a new pipeline (Named Entity Recognition)"
description: "A minimal demo NER project for spaCy v3 adapted from the spaCy v2 [`train_ner.py`](https://github.com/explosion/spaCy/blob/v2.3.x/examples/training/train_ner.py) example script for creating an NER component in a new pipeline."
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  lang: "de"
  # Set your GPU ID, -1 is CPU
  gpu_id: -1
  # Vectors model for train-with-vectors
  vectors_model: "de_core_news_lg"

  #NER specific vars
  ner_name: "ner_demo"
  ner_train: "ner/train.json"
  ner_dev: "ner/dev.json"
  ner_version: "0.0.0"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "corpus", "configs", "training", "scripts", "packages"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded.
assets:
  - dest: "assets/ner/train.json"
    description: "NER training data `srsly.write_json(\"train.json\", TRAIN_DATA)`"
  - dest: "assets/ner/dev.json"
    description: "NER development data"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  ner-all:
    - ner-convert
    - ner-create-config
    - ner-train
    # - ner-train-with-vectors
    - ner-evaluate
    - ner-package

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "download"
    help: "Download a spaCy model with pretrained vectors"
    script:
      - "python -m spacy download ${vars.vectors_model}"

  - name: "ner-convert"
    help: "Convert the data to spaCy's binary format"
    script:
      - "python scripts/convert.py ${vars.lang} assets/${vars.ner_train} corpus/ner/train.spacy"
      - "python scripts/convert.py ${vars.lang} assets/${vars.ner_dev} corpus/ner/dev.spacy"
    deps:
      - "assets/${vars.ner_train}"
      - "assets/${vars.ner_dev}"
      - "scripts/convert.py"
    outputs:
      - "corpus/ner/train.spacy"
      - "corpus/ner/dev.spacy"

  - name: "ner-create-config"
    help: "Create a new config with an NER pipeline component"
    script:
      - "python -m spacy init config --lang ${vars.lang} --pipeline ner configs/ner/config.cfg --force"
    outputs:
      - "configs/ner/config.cfg"
  - name: "ner-train"
    help: "Train the NER model"
    script:
      - "python -m spacy train configs/ner/config.cfg --output training/ner/ --paths.train corpus/ner/train.spacy --paths.dev corpus/ner/dev.spacy --training.eval_frequency 10 --training.patience 50 --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/ner/config.cfg"
      - "corpus/ner/train.spacy"
      - "corpus/ner/dev.spacy"
    outputs:
      - "training/ner/model-best"

  - name: "ner-train-with-vectors"
    help: "Train the NER model with vectors"
    script:
      - "python -m spacy train configs/ner/config.cfg --output training/ --paths.train corpus/ner/train.spacy --paths.dev corpus/ner/dev.spacy --training.eval_frequency 10 --training.patience 50 --gpu-id ${vars.gpu_id} --initialize.vectors ${vars.vectors_model} --components.tok2vec.model.embed.include_static_vectors true"
    deps:
      - "configs/ner/config.cfg"
      - "corpus/ner/train.spacy"
      - "corpus/ner/dev.spacy"
    outputs:
      - "training/ner/model-best"

  - name: "ner-evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate training/ner/model-best corpus/ner/dev.spacy --output training/ner/metrics.json"
    deps:
      - "corpus/ner/dev.spacy"
      - "training/ner/model-best"
    outputs:
      - "training/ner/metrics.json"

  - name: "ner-package"
    help: "Package the trained model as a pip package"
    script:
      - "python -m spacy package training/ner/model-best packages --name ${vars.ner_name} --version ${vars.ner_version} --force"
    deps:
      - "training/ner/model-best"
    outputs_no_cache:
      - "packages/${vars.lang}_${vars.ner_name}-${vars.ner_version}/dist/${vars.lang}_${vars.ner_name}-${vars.ner_version}.tar.gz"

  - name: "ner-visualize-model"
    help: "Visualize the model's output interactively using Streamlit"
    script:
      - "streamlit run scripts/visualize_model.py training/ner/model-best \"I saw Shaka Khan in London.\""
    deps:
      - "scripts/visualize_model.py"
      - "training/ner/model-best"
